{"version":3,"sources":["components/Wrapper/Wrapper.js","components/PageHeader.js","components/ScoreTracker.js","components/CharImg/CharImg.js","App.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","PageHeader","ScoreTracker","render","_this","currentScore","bestScore","activeMessage","React","Component","CharImg","state","clicked","src","info","image","alt","name","onClick","click","nextProps","this","setState","App","characters","shuffleChars","newCharOrder","sort","b","Math","random","handleImgClick","id","newScore","thisId","findIndex","char","handleNewGame","newState","Object","toConsumableArray","charsUpdater","forEach","_this2","components_PageHeader","components_ScoreTracker","components_Wrapper_Wrapper","map","character","components_CharImg_CharImg","key","ReactDOM","src_App_0","document","getElementById"],"mappings":"ypCAKeA,SAFC,SAAAC,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBJ,EAAMK,YCOpDC,EARI,SAAAN,GAAK,OACtBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACbH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,qDACCH,EAAMK,WCIIE,6MANbC,OAAS,kBACPP,EAAAC,EAAAC,cAAA,2BAAmBM,EAAKT,MAAMU,aAA9B,mBAA4DD,EAAKT,MAAMW,UAAUV,EAAAC,EAAAC,cAAA,WAChFM,EAAKT,MAAMY,6CAJWC,IAAMC,WCsClBC,oNApCbC,MAAQ,CACNC,SAAS,KAwBXT,OAAS,kBACPP,EAAAC,EAAAC,cAAA,OAAKC,UAAY,QACfH,EAAAC,EAAAC,cAAA,OACEC,UAAU,eACVc,IAAKT,EAAKT,MAAMmB,KAAKC,MACrBC,IAAKZ,EAAKT,MAAMmB,KAAKG,KACrBC,QAASd,EAAKT,MAAMwB,mGA3BAC,GACrBA,EAAUN,KAAKF,UAAYS,KAAK1B,MAAMmB,KAAKF,SAC1CS,KAAKC,SAAS,CAACV,QAAQQ,EAAUR,iBAPnBJ,IAAMC,YCoGbc,6MA9FbZ,MAAQ,CACNN,aAAc,EACdC,UAAW,EACXC,cAAe,8BACfiB,WAAYA,KAOdC,aAAe,WACb,IAAMC,EAAeF,EAAWG,KAAK,SAAU9B,EAAG+B,GAAK,MAAO,GAAMC,KAAKC,WAEzE1B,EAAKkB,SAAS,CACZE,WAAYE,OAIhBK,eAAiB,SAACC,GAChB,IAAMC,EAAW7B,EAAKO,MAAMN,aAAe,EAC3CD,EAAKkB,SAAS,CACZjB,aAAc4B,EACd1B,cAAe,iCAEb0B,EAAW7B,EAAKO,MAAML,WACxBF,EAAKkB,SAAS,CACZhB,UAAW2B,IAGf,IAAMC,EAAS9B,EAAKO,MAAMa,WAAWW,UAAU,SAACC,GAAD,OAAWA,EAAKJ,KAAOA,IACtE,GAAI5B,EAAKO,MAAMa,WAAWU,GAAQtB,QAChCR,EAAKiC,oBACA,CACL,IAAMC,EAAQC,OAAAC,EAAA,EAAAD,CAAOnC,EAAKO,MAAMa,YAChCc,EAASJ,GAAQtB,SAAU,EAE3BR,EAAKkB,SAAS,CACZE,WAAYc,IAGd,IAAML,EAAW7B,EAAKO,MAAMN,aAAe,EAC3CD,EAAKkB,SAAS,CACZjB,aAAc4B,EACd1B,cAAe,iCAEb0B,EAAW7B,EAAKO,MAAML,WACxBF,EAAKkB,SAAS,CACZhB,UAAW2B,IAKjB7B,EAAKqB,kBAGPY,cAAgB,WACd,IAAMI,EAAYF,OAAAC,EAAA,EAAAD,CAAOnC,EAAKO,MAAMa,YACpCiB,EAAaC,QAAQ,SAAAN,GACnBA,EAAKxB,SAAU,IAGjBR,EAAKkB,SAAS,CACZjB,aAAc,EACdE,cAAe,yDACfiB,WAAYiB,wFAzDdpB,KAAKI,gDA6DE,IAAAkB,EAAAtB,KACP,OACEzB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC8C,EAAD,KACEhD,EAAAC,EAAAC,cAAC+C,EAAD,CACExC,aAAcgB,KAAKV,MAAMN,aACzBC,UAAWe,KAAKV,MAAML,UACtBC,cAAec,KAAKV,MAAMJ,iBAE9BX,EAAAC,EAAAC,cAACgD,EAAD,KAEItB,EAAWuB,IAAI,SAACC,GAAD,OACbpD,EAAAC,EAAAC,cAACmD,EAAD,CACEnC,KAAMkC,EACNE,IAAKF,EAAUhB,GACfb,MAAO,kBAAMwB,EAAKZ,eAAeiB,EAAUhB,kBArFzCvB,aCHlB0C,IAAShD,OAAOP,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.2c25ebc5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper container\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from 'react';\r\n\r\nconst PageHeader = props => (\r\n  <div className=\"jumbotron jumbotron-fluid text-center\">\r\n    <h1>Clicky Game!</h1>\r\n    <h5>Click each character... but no repeats!</h5>\r\n    {props.children}\r\n  </div>\r\n);\r\n\r\nexport default PageHeader;","import React from 'react';\r\n\r\nclass ScoreTracker extends React.Component {\r\n\r\n  render = () => (\r\n    <p>Current Score: {this.props.currentScore} || Best Score: {this.props.bestScore}<br/>\r\n    {this.props.activeMessage}</p>\r\n  )\r\n}\r\n\r\nexport default ScoreTracker;\r\n","import React from 'react';\r\nimport \"./CharImg.css\";\r\n\r\nclass CharImg extends React.Component {\r\n  state = {\r\n    clicked: false\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps){\r\n    if(nextProps.info.clicked !== this.props.info.clicked){\r\n        this.setState({clicked:nextProps.clicked});\r\n    }\r\n}\r\n\r\n  // handleClick = () => {\r\n  //   if (this.state.clicked) {\r\n  //     // if you've clicked the character before, game over\r\n  //     this.props.gameOver()\r\n  //   } else {\r\n  //     // if you haven't, your score goes up!\r\n  //     this.setState({\r\n  //       clicked: true\r\n  //     });\r\n  //     this.props.scoreUp()\r\n  //   }\r\n  //   // In both cases, the images have to reshuffle.\r\n  //   this.props.shuffle()\r\n  // }\r\n\r\n  render = () => (\r\n    <div className = \"card\">\r\n      <img \r\n        className=\"card-img-top\" \r\n        src={this.props.info.image} \r\n        alt={this.props.info.name}\r\n        onClick={this.props.click}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CharImg;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport characters from './characters';\nimport Wrapper from './components/Wrapper'\nimport PageHeader from './components/PageHeader.js';\nimport ScoreTracker from './components/ScoreTracker.js';\nimport CharImg from './components/CharImg';\n\nclass App extends Component {\n  state = {\n    currentScore: 0,\n    bestScore: 0,\n    activeMessage: \"Click a Character to begin!\",\n    characters: characters\n  }\n\n  componentDidMount() {\n    this.shuffleChars()\n  }\n\n  shuffleChars = () => {\n    const newCharOrder = characters.sort(function (a, b) { return 0.5 - Math.random() });\n\n    this.setState({\n      characters: newCharOrder\n    })\n  }\n\n  handleImgClick = (id) => {\n    const newScore = this.state.currentScore + 1\n    this.setState({\n      currentScore: newScore,\n      activeMessage: \"You clicked a new character!\"\n    })\n    if (newScore > this.state.bestScore) {\n      this.setState({\n        bestScore: newScore\n      })\n    }\n    const thisId = this.state.characters.findIndex((char) => (char.id === id));\n    if (this.state.characters[thisId].clicked) {\n      this.handleNewGame()\n    } else {\n      const newState = [...this.state.characters]\n      newState[thisId].clicked = true;\n\n      this.setState({\n        characters: newState\n      })\n\n      const newScore = this.state.currentScore + 1\n      this.setState({\n        currentScore: newScore,\n        activeMessage: \"You clicked a new character!\"\n      })\n      if (newScore > this.state.bestScore) {\n        this.setState({\n          bestScore: newScore\n        })\n      }\n    }\n\n    this.shuffleChars()\n  }\n\n  handleNewGame = () => {\n    const charsUpdater = [...this.state.characters];\n    charsUpdater.forEach(char => {\n      char.clicked = false\n    })\n\n    this.setState({\n      currentScore: 0,\n      activeMessage: \"Oops! You've clicked this character before! Game over!\",\n      characters: charsUpdater\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <PageHeader>\n          <ScoreTracker\n            currentScore={this.state.currentScore}\n            bestScore={this.state.bestScore}\n            activeMessage={this.state.activeMessage} />\n        </PageHeader>\n        <Wrapper>\n          {\n            characters.map((character) => (\n              <CharImg\n                info={character}\n                key={character.id}\n                click={() => this.handleImgClick(character.id)} />\n            ))\n          }\n\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}